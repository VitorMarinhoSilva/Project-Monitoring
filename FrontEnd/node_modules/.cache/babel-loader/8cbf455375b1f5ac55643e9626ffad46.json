{"ast":null,"code":"/*! @azure/msal-browser v2.30.0 2022-10-10 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\nvar PublicClientApplication = /** @class */function (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2 /*return*/, this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n      var _this = this;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            atsMeasurement.flushMeasurement();\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            atsMeasurement.flushMeasurement();\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2 /*return*/, response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n          atsMeasurement.endMeasurement({\n            success: true\n          });\n          // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n          atsMeasurement.discardMeasurement();\n          return [2 /*return*/, cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var astsAsyncMeasurement, result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3 /*break*/, 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt \n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2 /*return*/, silentIframeClient.acquireToken(request)];\n                  }\n                  throw e;\n                });\n              });\n            });\n            return [3 /*break*/, 3];\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];\n          case 2:\n            silentRequest_1 = _a.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              }\n              // block the reload if it occurred inside a hidden iframe\n              BrowserUtils.blockReloadInHiddenIframes();\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                  throw refreshTokenError;\n                }\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/, result.then(function (response) {\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n              astsAsyncMeasurement.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                accessTokenSize: response.accessToken.length,\n                idTokenSize: response.idToken.length,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n              astsAsyncMeasurement.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            })];\n        }\n      });\n    });\n  };\n  return PublicClientApplication;\n}(ClientApplication);\nexport { PublicClientApplication };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","_this","activeSilentTokenRequests","Map","PublicClientApplication","request","correlationId","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","DEFAULT_REQUEST","acquireTokenPopup","atsMeasurement","performanceClient","startMeasurement","PerformanceEvents","AcquireTokenSilent","preflightBrowserEnvironmentCheck","InteractionType","Silent","account","getActiveAccount","BrowserAuthError","createNoAccountError","thumbprint","clientId","config","auth","authority","Constants","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","silentRequestKey","JSON","stringify","cachedResponse","get","response","acquireTokenSilentAsync","then","result","delete","endMeasurement","success","fromCache","accessTokenSize","accessToken","length","idTokenSize","idToken","isNativeBroker","fromNativeBroker","cacheLookupPolicy","requestId","flushMeasurement","catch","error","errorCode","subErrorCode","subError","set","discardMeasurement","eventHandler","emitEvent","EventType","ACQUIRE_TOKEN_START","astsAsyncMeasurement","AcquireTokenSilentAsync","NativeMessageHandler","isNativeAvailable","nativeExtensionProvider","nativeAccountId","silentRequest","acquireTokenNative","ApiId","acquireTokenSilent_silentFlow","e","NativeAuthError","isFatal","undefined","silentIframeClient","createSilentIframeClient","acquireToken","silentCacheClient","createSilentCacheClient","initializeSilentRequest","silentRequest_1","_a","requestWithCLP_1","CacheLookupPolicy","Default","acquireTokenFromCache","cacheError","AccessToken","BrowserUtils","blockReloadInHiddenIframes","ACQUIRE_TOKEN_NETWORK_START","acquireTokenByRefreshToken","refreshTokenError","isServerError","ServerError","isInteractionRequiredError","InteractionRequiredAuthError","isInvalidGrantError","BrowserConstants","INVALID_GRANT_ERROR","AccessTokenAndRefreshToken","RefreshToken","Skip","acquireTokenBySilentIframe","ACQUIRE_TOKEN_SUCCESS","tokenRenewalError","ACQUIRE_TOKEN_FAILURE","ClientApplication"],"sources":["C:\\Users\\vitor.silva\\Documents\\projetos-scala\\ProjectMonitoring\\ProjectMonitoring\\FrontEnd\\node_modules\\@azure\\msal-browser\\src\\app\\PublicClientApplication.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AuthenticationResult, Constants, RequestThumbprint, AuthError, PerformanceEvents, ServerError, InteractionRequiredAuthError } from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { DEFAULT_REQUEST, InteractionType, ApiId, CacheLookupPolicy, BrowserConstants } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { NativeAuthError } from \"../error/NativeAuthError\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n\n    // Active requests\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration object for the MSAL PublicClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n\n        this.activeSilentTokenRequests = new Map();\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return this.acquireTokenRedirect({\n            correlationId,\n            ...(request || DEFAULT_REQUEST)\n        });\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginPopup called\", correlationId);\n        return this.acquireTokenPopup({\n            correlationId,\n            ...(request || DEFAULT_REQUEST)\n        });\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        \n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw BrowserAuthError.createNoAccountError();\n        }\n\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || Constants.EMPTY_STRING,\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n\n            const response = this.acquireTokenSilentAsync({\n                ...request,\n                correlationId\n            }, account)\n                .then((result) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.endMeasurement({\n                        success: true,\n                        fromCache: result.fromCache,\n                        accessTokenSize: result.accessToken.length,\n                        idTokenSize: result.idToken.length,\n                        isNativeBroker: result.fromNativeBroker,\n                        cacheLookupPolicy: request.cacheLookupPolicy,\n                        requestId: result.requestId\n                    });\n                    atsMeasurement.flushMeasurement();\n                    return result;\n                })\n                .catch((error: AuthError) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.endMeasurement({\n                        errorCode: error.errorCode,\n                        subErrorCode: error.subError,\n                        success: false\n                    });\n                    atsMeasurement.flushMeasurement();\n                    throw error;\n                });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return response;\n        } else {\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n            atsMeasurement.endMeasurement({\n                success: true\n            });\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n            atsMeasurement.discardMeasurement();\n            return cachedResponse;\n        }\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     * @param {@link (SilentRequest:type)}\n     * @param {@link (AccountInfo:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} \n     */\n    protected async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n        const astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n\n        let result: Promise<AuthenticationResult>;\n        if (NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId) {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            const silentRequest: SilentRequest = {\n                ...request,\n                account\n            };\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(async (e: AuthError) => {\n                // If native token acquisition fails for availability reasons fallback to web flow\n                if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt \n\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\n                    const silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return silentIframeClient.acquireToken(request);\n                }\n                throw e;\n            });     \n        } else {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n\n            const silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\n            \n            const requestWithCLP = {\n                ...request,\n                // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n                cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            };\n\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest, requestWithCLP).catch((cacheError: AuthError) => {\n                if (requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                    throw cacheError;\n                }\n\n                // block the reload if it occurred inside a hidden iframe\n                BrowserUtils.blockReloadInHiddenIframes();\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest);\n\n                return this.acquireTokenByRefreshToken(silentRequest, requestWithCLP).catch((refreshTokenError: AuthError) => {\n                    const isServerError = refreshTokenError instanceof ServerError;\n                    const isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                    const isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\n\n                    if ((!isServerError ||\n                        !isInvalidGrantError ||\n                        isInteractionRequiredError ||\n                        requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\n                        requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\n                        && (requestWithCLP.cacheLookupPolicy !== CacheLookupPolicy.Skip)\n                    ) {\n                        throw refreshTokenError;\n                    }\n                        \n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n                    return this.acquireTokenBySilentIframe(silentRequest);\n                });\n            });\n        }\n\n        return result.then((response) => {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n            astsAsyncMeasurement.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                accessTokenSize: response.accessToken.length,\n                idTokenSize: response.idToken.length,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n            });\n            return response;\n        }).catch((tokenRenewalError: AuthError) => {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n            astsAsyncMeasurement.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n            });\n            throw tokenRenewalError;\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}